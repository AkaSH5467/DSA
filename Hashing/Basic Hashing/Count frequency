
/*****************************************************************BAsIC NAIVE APPROACH************************************************************************/
#include <bits/stdc++.h>

using namespace std;

void Frequency(int arr[],int n)
{
    vector<bool>visited(n,false);
    
    for(int i=0;i<n;i++)
    {
        if(visited[i]==true)
        {
            continue;
        }
        
        int count=1;
        for(int j=i+1;j<n;j++)
        {
            if(arr[i]==arr[j])
            {
                visited[j]=true;           //important line
                count++;
            }
        }
        
         cout<<arr[i]<<" "<<count<<endl;
    }
    
   
}

int main()
{
    
    int arr[] = {10,5,10,15,10,5};
    int n = sizeof(arr) / sizeof(arr[0]);
    Frequency(arr, n);
    return 0;

    
}


/************************************************************USING MAPS************************************************************************************/



#include <bits/stdc++.h>

using namespace std;

void Frequency(int arr[],int n)
{
    unordered_map<int,int>mp;
    
    for(int i=0;i<n;i++)
    {
        mp[arr[i]]++;
    }
    
    for(auto x: mp)
    {
        cout<<x.first<<" "<<x.second<<endl;
    }
    
   
}

int main()
{
    
    int arr[] = {10,5,10,15,10,5};
    int n = sizeof(arr) / sizeof(arr[0]);
    Frequency(arr, n);
    return 0;

    
}

